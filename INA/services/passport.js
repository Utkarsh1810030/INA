const passport = require("passport");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
const mongoose = require("mongoose");

const keys = require("../config/keys");
const User = mongoose.model("users");

// user argument here is the one which is inserted or found in the database
passport.serializeUser((user, done) => {
  // here user.id references to the __id generated by mongo and it is for the purpose to identify different users signing with facebook, linkedIn etc.
  done(null, user.id);
});

// This deserialize function will take the cookie token out of the header and find in the database the user document with its document id
passport.deserializeUser(async (id, done) => {
  const user = await User.findById(id);
  done(null, user);
});

passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: "/auth/google/callback",
      proxy: true, // We make use of tit to handle http or https redirection
    },
    async (accessToken, refreshToken, profile, done) => {
      const existingUser = await User.findOne({ googleId: profile.id });
      // There are 2 arguments for done. 1st is error object and second is the found object or exisiting user
      if (existingUser) {
        return done(null, existingUser);
      }

      const user = await new User({ googleId: profile.id }).save();
      done(null, user);
    }
  )
);
